// Generated by CoffeeScript 1.9.2

/*
 * Database helper class
 */

(function() {
  var DbHelper, async, mongo, util;

  async = require('async');

  util = require('util');

  mongo = require('mongoskin');

  DbHelper = (function() {
    function DbHelper(databaseUrl) {
      this.db = mongo.db(databaseUrl, {
        native_parser: true
      });
    }

    DbHelper.prototype.getCollection = function(collectionName, callback) {
      return this.db.collection(collectionName).find().toArray(function(error, result) {
        if (error != null) {
          console.log("Error finding items of collection " + collectionName + " : " + (util.inspect(error)));
          return callback(error);
        }
        return callback(null, result);
      });
    };

    DbHelper.prototype.insertUser = function(user, finalCallback) {
      var checkDuplicates, collection, createUser;
      collection = this.db.collection('userlist');
      return async.waterfall([
        checkDuplicates = function(callback) {
          return collection.findOne({
            'username': user.username
          }, function(error, object) {
            if (error != null) {
              return callback(error);
            }
            if (object != null) {
              return callback(null, true);
            }
            return callback(null, false);
          });
        }, createUser = function(alreadyExists, callback) {
          if (alreadyExists) {
            return callback(null, 'Ok');
          }
          return collection.insert(user, function(error, result) {
            if (error != null) {
              return callback(error);
            } else {
              return callback(null, 'Ok');
            }
          });
        }
      ], function(error, result) {
        if (error != null) {
          return finalCallback("Error inserting user to collection : " + (util.inspect(error)));
        }
        return finalCallback(null, result);
      });
    };

    DbHelper.prototype.deleteUser = function(userId, callback) {
      return this.db.collection('userlist').removeById(userId, function(error, result) {
        if (error != null) {
          return callback(error);
        } else {
          return callback(null, 'Ok');
        }
      });
    };

    DbHelper.prototype.getEmail = function(emailId, callback) {
      return this.db.collection('emails').find({
        'v:custom_id': emailId
      }).limit(1).toArray(function(error, result) {
        if (error != null) {
          console.log("Error finding email " + emailId + " : " + (util.inspect(error)));
          return callback(error);
        } else {
          return callback(null, result[0]);
        }
      });
    };

    DbHelper.prototype.insertEmail = function(email, callback) {
      return this.db.collection('emails').insert(email, function(error, result) {
        if (error != null) {
          console.log("Error inserting email : " + (util.inspect(error)));
          return callback(error);
        } else {
          return callback(null);
        }
      });
    };

    DbHelper.prototype.getSms = function(smsId, callback) {
      return this.db.collection('sms').find({
        'custom_id': smsId
      }).limit(1).toArray(function(error, result) {
        if (error != null) {
          console.log("Error finding sms " + smsId + " : " + (util.inspect(error)));
          return callback(error);
        } else {
          return callback(null, result[0]);
        }
      });
    };

    DbHelper.prototype.insertSms = function(sms, callback) {
      return this.db.collection('sms').insert(sms, function(error, result) {
        if (error != null) {
          console.log("Error inserting sms : " + (util.inspect(error)));
          return callback(error);
        } else {
          return callback(null);
        }
      });
    };

    return DbHelper;

  })();

  module.exports = DbHelper;

}).call(this);
