// Generated by CoffeeScript 1.9.2

/*
 * Facade class for emails.
 */

(function() {
  var Emails, Mailgun, _, async, constants, crypto, express, moment, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  express = require('express');

  util = require('util');

  async = require('async');

  crypto = require('crypto');

  moment = require('moment');

  _ = require('lodash');

  constants = require('../configuration/configuration');

  Mailgun = require('mailgun-js');

  moment().format();

  Emails = (function() {
    function Emails(database) {
      this.postEmail = bind(this.postEmail, this);
      this.mailgun = new Mailgun({
        apiKey: constants.local.MAILGUN_API_KEY,
        domain: constants.local.MAILGUN_DOMAIN
      });
      this.database = database;
    }

    Emails.prototype.postEmail = function(req, res) {
      var hash, idempotenceValidation, insertToDatabse, postToMailgun;
      return async.waterfall([
        hash = (function(_this) {
          return function(callback) {
            var error, hasher, payload;
            try {
              hasher = crypto.createHash('sha256');
            } catch (_error) {
              error = _error;
              callback("Could not create hasher " + (util.inspect(error)));
            }
            payload = req.body;
            try {
              hasher.update(JSON.stringify(payload));
            } catch (_error) {
              error = _error;
              callback("Could not create hash " + (util.inspect(error)));
            }
            hash = hasher.digest('hex');
            return callback(null, hash);
          };
        })(this), idempotenceValidation = (function(_this) {
          return function(hash, callback) {
            return _this.database.getEmails(hash, function(error, result) {
              var alreadySent, now, threshold;
              if (error != null) {
                return callback(error);
              }
              if (result != null) {
                now = moment();
                threshold = moment().subtract(constants.local.NOTIFICATIONS_DUPLICATES_THRESHOLD_SEC, 's');
                alreadySent = false;
                _.forEach(result, function(email) {
                  if (moment(email.timestamp).isBetween(threshold, now)) {
                    return alreadySent = true;
                  }
                });
                if (alreadySent) {
                  console.log("Email " + hash + " has already been sent within the last five minutes");
                  return callback(null, true, hash);
                }
              }
              return callback(null, false, hash);
            });
          };
        })(this), postToMailgun = (function(_this) {
          return function(alreadySent, hash, callback) {
            if (alreadySent) {
              return callback(null, true, hash);
            } else {
              return _this.mailgun.messages().send(req.body, function(error, result) {
                if (error != null) {
                  console.log("Error sending email to " + req.body.to + " : " + (util.inspect(error)));
                  return callback(error);
                } else {
                  return callback(null, false, hash);
                }
              });
            }
          };
        })(this), insertToDatabse = (function(_this) {
          return function(alreadySent, hash, callback) {
            var email, timestamp;
            if (alreadySent) {
              return callback(null);
            } else {
              timestamp = moment.utc().format();
              email = {
                'hash': hash,
                'timestamp': timestamp
              };
              return _this.database.insertEmail(email, function(error, result) {
                if (error != null) {
                  console.log("Error inserting email " + hash + " to database : " + (util.inspect(error)));
                  return callback(error);
                } else {
                  return callback(null);
                }
              });
            }
          };
        })(this)
      ], function(error, result) {
        if (error != null) {
          return res.status(500).send({
            error: "An error occured while attempting to send the email : " + (util.inspect(error))
          });
        } else {
          return res.status(200).send({
            status: 200
          });
        }
      });
    };

    return Emails;

  })();

  module.exports = Emails;

}).call(this);
