// Generated by CoffeeScript 1.9.2
(function() {
  var API_KEY, DOMAIN, Notifications, TWILIO_ACCOUNTSID, TWILIO_AUTHTOKEN, async, express, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  express = require('express');

  util = require('util');

  async = require('async');

  API_KEY = '{API_KEY}';

  DOMAIN = '{DOMAIN}';

  TWILIO_ACCOUNTSID = '{TWILIO_ACCOUNTSID}';

  TWILIO_AUTHTOKEN = '{TWILIO_AUTHTOKEN}';

  Notifications = (function() {
    function Notifications(database) {
      this.postSms = bind(this.postSms, this);
      this.postEmail = bind(this.postEmail, this);
      this.mailgun = require('mailgun-js')({
        apiKey: API_KEY,
        domain: DOMAIN
      });
      this.twilio = require('twilio')(TWILIO_ACCOUNTSID, TWILIO_AUTHTOKEN);
      this.database = database;
    }

    Notifications.prototype.postEmail = function(req, res) {
      var idempotenceValidation, insertToDatabse, postToMailgun;
      return async.waterfall([
        idempotenceValidation = (function(_this) {
          return function(callback) {
            return _this.database.getEmail(req.body['v:custom_id'], function(error, result) {
              if (error != null) {
                return callback(error);
              }
              if (result != null) {
                console.log("Email " + result['v:custom_id'] + " has already been sent");
                return callback(null, true);
              } else {
                return callback(null, false);
              }
            });
          };
        })(this), postToMailgun = (function(_this) {
          return function(alreadySent, callback) {
            if (alreadySent) {
              return callback(null, true);
            } else {
              return _this.mailgun.messages().send(req.body, function(error, result) {
                if (error != null) {
                  console.log("Error sending email to " + req.body.to + " : " + (util.inspect(error)));
                  return callback(error);
                } else {
                  return callback(null, false);
                }
              });
            }
          };
        })(this), insertToDatabse = (function(_this) {
          return function(alreadySent, callback) {
            if (alreadySent) {
              return callback(null);
            } else {
              return _this.database.insertEmail(req.body, function(error, result) {
                if (error != null) {
                  console.log("Error inserting email " + req.body['v:custom_id'] + " to database : " + (util.inspect(error)));
                  return callback(error);
                } else {
                  return callback(null);
                }
              });
            }
          };
        })(this)
      ], function(error, result) {
        if (error != null) {
          return res.status(500).send({
            error: "An error occured while attempting to send the email : " + (util.inspect(error))
          });
        } else {
          return res.status(200).send({
            status: 200
          });
        }
      });
    };

    Notifications.prototype.postSms = function(req, res) {
      var idempotenceValidation, insertToDatabse, postToTwilio;
      return async.waterfall([
        idempotenceValidation = (function(_this) {
          return function(callback) {
            return _this.database.getSms(req.body.custom_id, function(error, result) {
              if (error != null) {
                return callback(error);
              }
              if (result != null) {
                console.log("sms " + req.body.custom_id + " has already been sent");
                return callback(null, true);
              } else {
                return callback(null, false);
              }
            });
          };
        })(this), postToTwilio = (function(_this) {
          return function(alreadySent, callback) {
            if (alreadySent) {
              return callback(null, true);
            } else {
              console.log(req.body.sms);
              return _this.twilio.messages.create(req.body.sms, function(error, result) {
                if (error != null) {
                  console.log("Error sending twilio sms to " + req.body.sms.to + " : " + (util.inspect(error)));
                  return callback(error);
                } else {
                  return callback(null, false);
                }
              });
            }
          };
        })(this), insertToDatabse = (function(_this) {
          return function(alreadySent, callback) {
            if (alreadySent) {
              return callback(null);
            } else {
              return _this.database.insertSms(req.body, function(error, result) {
                if (error != null) {
                  console.log("Error inserting sms " + req.body.custom_id + " to database : " + (util.inspect(error)));
                  return callback(error);
                } else {
                  return callback(null);
                }
              });
            }
          };
        })(this)
      ], function(error, result) {
        if (error != null) {
          return res.status(500).send({
            error: "An error occured while attempting to send the sms : " + (util.inspect(error))
          });
        } else {
          return res.status(200).send({
            status: 200
          });
        }
      });
    };

    return Notifications;

  })();

  module.exports = Notifications;

}).call(this);
